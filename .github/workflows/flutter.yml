name: Flutter

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/flutter.yml
      - flutter/**
    branches:
      - '**'
    tags-ignore:
      - '*/latest'

jobs:
  build_android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: stable

      - run: |
          echo $ANDROID_KEYSTORE | base64 -d > keystore.jks
          export GIT_COMMIT_HASH=$(git rev-parse HEAD)
          flutter build apk --dart-define=GIT_COMMIT_HASH=$GIT_COMMIT_HASH
        working-directory: flutter
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_KEY_ALIAS: ${{ secrets.ANDROID_KEYSTORE_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEYSTORE_PATH: ../../keystore.jks

      - uses: actions/upload-artifact@v3
        with:
          name: zenith-flutter-android
          path: flutter/build/app/outputs/flutter-apk/app-release.apk

  build_web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: stable

      - run: flutter build web --web-renderer canvaskit --dart-define=DEFAULT_SERVER=
        working-directory: flutter

      - uses: actions/upload-artifact@v3
        with:
          name: zenith-flutter-web
          path: flutter/build/web

  deploy_web:
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs:
      - build_web
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: zenith-flutter-web

      - run: echo "/* /index.html" > _redirects

      - uses: netlify/actions/cli@master
        with:
          args: deploy --dir=. --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install wget
        run: |
          choco install wget

      - name: Install corrosion
        run: |
          wget https://github.com/hasali19/corrosion-build/releases/download/autobuild-2022-12-29-17-03/corrosion-win.tar.gz
          tar -xvf corrosion-win.tar.gz
          mv corrosion-win 'C:\Program Files (x86)\Corrosion'

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Download mpv
        run: |
          wget https://sourceforge.net/projects/mpv-player-windows/files/libmpv/mpv-dev-x86_64-v3-20221113-git-2f74734.7z/download
          7z x download -ompv
          cd mpv
          $exports = get-content mpv.def
          echo "EXPORTS" > mpv.def
          echo $exports >> mpv.def
          lib /def:mpv.def /name:mpv-2.dll /out:mpv.lib /MACHINE:X64

      - run: |
          $env:MPV_DIR="$(pwd)\mpv"
          ls -r $env:MPV_DIR
          cd flutter
          flutter build windows

      - uses: actions/upload-artifact@v3
        with:
          name: zenith-flutter-windows
          path: flutter/build/windows/runner/Release

      - uses: ilammy/msvc-dev-cmd@v1

      - run: |
          $env:MPV_DIR="$(pwd)\mpv"
          cd flutter
          $version = (cat .\pubspec.yaml | select-string -pattern '^version: (.+)').Matches[0].Groups[1].Value.Split('+')[0].Trim()
          $version = "$version.$env:GITHUB_RUN_NUMBER"
          echo "Building MSIX package version $version"
          flutter pub run msix:create --version $version --publisher 'CN=hasali19, C=UK' --sign-msix false
          [System.IO.File]::WriteAllBytes("$(pwd)\cert.pfx", [Convert]::FromBase64String("${{ secrets.CODE_SIGNING_CERT_PFX }}"))
          signtool sign /fd SHA256 /a /f "$(pwd)\cert.pfx" /p '${{ secrets.CODE_SIGNING_CERT_PASSWORD }}' .\build\windows\runner\Release\zenith.msix
          echo "Generating appinstaller"
          (cat windows\zenith.appinstaller) -replace '%VERSION%', $version > zenith.appinstaller

      - uses: actions/upload-artifact@v3
        with:
          name: zenith-flutter-windows-msix
          path: flutter/build/windows/runner/Release/zenith.msix

      - uses: actions/upload-artifact@v3
        with:
          name: zenith-flutter-windows-appinstaller
          path: flutter/zenith.appinstaller

  release:
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs:
      - build_windows
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - run: |
          ls -R artifacts
          mkdir release_artifacts

          echo "Preparing windows zip"
          cd artifacts/zenith-flutter-windows
          zip -r ../../release_artifacts/zenith-windows.zip *
          cd ../..

          echo "Preparing windows msix package"
          cp artifacts/zenith-flutter-windows-msix/zenith.msix release_artifacts/zenith-windows.msix
          cp artifacts/zenith-flutter-windows-appinstaller/zenith.appinstaller release_artifacts/zenith-windows.appinstaller

          echo "Preparing android apk"
          cp artifacts/zenith-flutter-android/app-release.apk release_artifacts/zenith.apk

          echo "Preparing web zip"
          cd artifacts/zenith-flutter-web
          zip -r ../../release_artifacts/zenith-web.zip *
          cd ../..

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.CR_PAT }}"
          automatic_release_tag: "flutter/latest"
          prerelease: false
          title: "Flutter Client - Latest Build"
          files: release_artifacts/*
