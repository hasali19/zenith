// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.hasali.zenith.generated.remoteplayback

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class RoutesScanningMode(val raw: Int) {
  NONE(0),
  PASSIVE(1),
  ACTIVE(2);

  companion object {
    fun ofRaw(raw: Int): RoutesScanningMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MediaRoute (
  val id: String,
  val name: String,
  val description: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MediaRoute {
      val id = list[0] as String
      val name = list[1] as String
      val description = list[2] as String?
      return MediaRoute(id, name, description)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
      description,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MediaRouterState (
  val routes: List<MediaRoute?>,
  val selected: MediaRoute? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MediaRouterState {
      val routes = list[0] as List<MediaRoute?>
      val selected: MediaRoute? = (list[1] as List<Any?>?)?.let {
        MediaRoute.fromList(it)
      }
      return MediaRouterState(routes, selected)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      routes,
      selected?.toList(),
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object RemotePlaybackApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaRoute.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaRoute.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaRouterState.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MediaRoute -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MediaRoute -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MediaRouterState -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface RemotePlaybackApi {
  fun getRouterState(): MediaRouterState
  fun registerRoutesListener(mode: RoutesScanningMode)
  fun unregisterRoutesListener(mode: RoutesScanningMode)
  fun selectRoute(id: String?)

  companion object {
    /** The codec used by RemotePlaybackApi. */
    val codec: MessageCodec<Any?> by lazy {
      RemotePlaybackApiCodec
    }
    /** Sets up an instance of `RemotePlaybackApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: RemotePlaybackApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.zenith.RemotePlaybackApi.getRouterState", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getRouterState())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.zenith.RemotePlaybackApi.registerRoutesListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = RoutesScanningMode.ofRaw(args[0] as Int)!!
            var wrapped: List<Any?>
            try {
              api.registerRoutesListener(modeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.zenith.RemotePlaybackApi.unregisterRoutesListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = RoutesScanningMode.ofRaw(args[0] as Int)!!
            var wrapped: List<Any?>
            try {
              api.unregisterRoutesListener(modeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.zenith.RemotePlaybackApi.selectRoute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String?
            var wrapped: List<Any?>
            try {
              api.selectRoute(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object RemotePlaybackEventsApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaRoute.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaRoute.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MediaRoute -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MediaRoute -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class RemotePlaybackEventsApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by RemotePlaybackEventsApi. */
    val codec: MessageCodec<Any?> by lazy {
      RemotePlaybackEventsApiCodec
    }
  }
  fun onRoutesChanged(routesArg: List<MediaRoute>, callback: (Result<Unit>) -> Unit) {
    val channelName = "dev.flutter.pigeon.zenith.RemotePlaybackEventsApi.onRoutesChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(routesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onSelectedMediaRouteChanged(routeArg: MediaRoute?, callback: (Result<Unit>) -> Unit) {
    val channelName = "dev.flutter.pigeon.zenith.RemotePlaybackEventsApi.onSelectedMediaRouteChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(routeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
