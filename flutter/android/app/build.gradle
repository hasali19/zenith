def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def releaseKeyAlias = keystoreProperties.getProperty('keyAlias')
if (releaseKeyAlias == null) {
    releaseKeyAlias = System.getenv('ANDROID_KEYSTORE_KEY_ALIAS')
}

def releaseStorePassword = keystoreProperties.getProperty('storePassword')
if (releaseStorePassword == null) {
    releaseStorePassword = System.getenv('ANDROID_KEYSTORE_PASSWORD')
}

def releaseStoreFile = keystoreProperties.getProperty('storeFile')
if (releaseStoreFile == null) {
    releaseStoreFile = System.getenv('ANDROID_KEYSTORE_PATH')
}

def gitCommitHash = System.getenv('GIT_COMMIT_HASH')
if (gitCommitHash == null) {
    gitCommitHash = "UNKNOWN"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace 'dev.hasali.zenith'
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "dev.hasali.zenith"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resValue "string", "git_commit_hash", gitCommitHash

        // When using --split-per-abi, flutter will override the versionCode for each abi variant
        // with an offset, so each apk ends up with a different versionCode. The following will
        // overrides flutter's override to make sure all apks have the same version.
        project.android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                // Flutter's versions had an offset of up to 4000, so use that to ensure we can
                // still update from a previous version.
                output.versionCodeOverride = 4000 + flutterVersionCode.toInteger()
            }
        }
    }

    signingConfigs {
        release {
            keyAlias releaseKeyAlias
            keyPassword releaseStorePassword
            storeFile releaseStoreFile ? file(releaseStoreFile) : null
            storePassword releaseStorePassword
        }
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix '.debug'
            resValue 'string', 'app_name', 'Zenith (d)'
        }

        release {
            signingConfig signingConfigs.release
            resValue 'string', 'app_name', 'Zenith'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
