// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum RoutesScanningMode {
  none,
  passive,
  active,
}

enum MediaQueueType {
  generic,
  tvSeries,
  videoPlaylist,
  movie,
}

enum MediaTrackType {
  video,
  audio,
  text,
}

enum MediaTrackSubtype {
  subtitles,
}

enum MediaType {
  movie,
  tvShow,
  unknown,
}

enum ResumeState {
  pause,
  play,
  unchanged,
}

enum IdleReason {
  canceled,
  error,
  finished,
  interrupted,
  none,
}

enum PlayerState {
  idle,
  buffering,
  loading,
  paused,
  playing,
  unknown,
}

class MediaRoute {
  MediaRoute({
    required this.id,
    required this.name,
    this.description,
    required this.isSelected,
  });

  String id;

  String name;

  String? description;

  bool isSelected;

  Object encode() {
    return <Object?>[
      id,
      name,
      description,
      isSelected,
    ];
  }

  static MediaRoute decode(Object result) {
    result as List<Object?>;
    return MediaRoute(
      id: result[0]! as String,
      name: result[1]! as String,
      description: result[2] as String?,
      isSelected: result[3]! as bool,
    );
  }
}

class MediaLoadRequestData {
  MediaLoadRequestData({
    this.mediaInfo,
    this.queueData,
    this.customDataJson,
  });

  MediaInfo? mediaInfo;

  MediaQueueData? queueData;

  String? customDataJson;

  Object encode() {
    return <Object?>[
      mediaInfo,
      queueData,
      customDataJson,
    ];
  }

  static MediaLoadRequestData decode(Object result) {
    result as List<Object?>;
    return MediaLoadRequestData(
      mediaInfo: result[0] as MediaInfo?,
      queueData: result[1] as MediaQueueData?,
      customDataJson: result[2] as String?,
    );
  }
}

class MediaInfo {
  MediaInfo({
    this.url,
    this.mediaTracks,
    this.metadata,
    this.streamDuration,
    this.customDataJson,
  });

  String? url;

  List<MediaTrack>? mediaTracks;

  MediaMetadata? metadata;

  int? streamDuration;

  String? customDataJson;

  Object encode() {
    return <Object?>[
      url,
      mediaTracks,
      metadata,
      streamDuration,
      customDataJson,
    ];
  }

  static MediaInfo decode(Object result) {
    result as List<Object?>;
    return MediaInfo(
      url: result[0] as String?,
      mediaTracks: (result[1] as List<Object?>?)?.cast<MediaTrack>(),
      metadata: result[2] as MediaMetadata?,
      streamDuration: result[3] as int?,
      customDataJson: result[4] as String?,
    );
  }
}

class MediaQueueData {
  MediaQueueData({
    this.items,
    this.startIndex,
    this.queueType,
  });

  List<MediaQueueItem>? items;

  int? startIndex;

  MediaQueueType? queueType;

  Object encode() {
    return <Object?>[
      items,
      startIndex,
      queueType,
    ];
  }

  static MediaQueueData decode(Object result) {
    result as List<Object?>;
    return MediaQueueData(
      items: (result[0] as List<Object?>?)?.cast<MediaQueueItem>(),
      startIndex: result[1] as int?,
      queueType: result[2] as MediaQueueType?,
    );
  }
}

class MediaQueueItem {
  MediaQueueItem({
    this.mediaInfo,
    this.activeTrackIds,
    this.autoPlay,
    this.startTime,
    this.customDataJson,
  });

  MediaInfo? mediaInfo;

  List<int>? activeTrackIds;

  bool? autoPlay;

  double? startTime;

  String? customDataJson;

  Object encode() {
    return <Object?>[
      mediaInfo,
      activeTrackIds,
      autoPlay,
      startTime,
      customDataJson,
    ];
  }

  static MediaQueueItem decode(Object result) {
    result as List<Object?>;
    return MediaQueueItem(
      mediaInfo: result[0] as MediaInfo?,
      activeTrackIds: (result[1] as List<Object?>?)?.cast<int>(),
      autoPlay: result[2] as bool?,
      startTime: result[3] as double?,
      customDataJson: result[4] as String?,
    );
  }
}

class MediaTrack {
  MediaTrack({
    required this.trackId,
    required this.type,
    this.contentId,
    this.subtype,
    this.name,
    this.language,
  });

  int trackId;

  MediaTrackType type;

  String? contentId;

  MediaTrackSubtype? subtype;

  String? name;

  String? language;

  Object encode() {
    return <Object?>[
      trackId,
      type,
      contentId,
      subtype,
      name,
      language,
    ];
  }

  static MediaTrack decode(Object result) {
    result as List<Object?>;
    return MediaTrack(
      trackId: result[0]! as int,
      type: result[1]! as MediaTrackType,
      contentId: result[2] as String?,
      subtype: result[3] as MediaTrackSubtype?,
      name: result[4] as String?,
      language: result[5] as String?,
    );
  }
}

class MediaMetadata {
  MediaMetadata({
    required this.mediaType,
    this.title,
    this.seriesTitle,
    this.seasonNumber,
    this.episodeNumber,
    this.poster,
    this.backdrop,
  });

  MediaType mediaType;

  String? title;

  String? seriesTitle;

  int? seasonNumber;

  int? episodeNumber;

  MediaMetadataImage? poster;

  MediaMetadataImage? backdrop;

  Object encode() {
    return <Object?>[
      mediaType,
      title,
      seriesTitle,
      seasonNumber,
      episodeNumber,
      poster,
      backdrop,
    ];
  }

  static MediaMetadata decode(Object result) {
    result as List<Object?>;
    return MediaMetadata(
      mediaType: result[0]! as MediaType,
      title: result[1] as String?,
      seriesTitle: result[2] as String?,
      seasonNumber: result[3] as int?,
      episodeNumber: result[4] as int?,
      poster: result[5] as MediaMetadataImage?,
      backdrop: result[6] as MediaMetadataImage?,
    );
  }
}

class MediaMetadataImage {
  MediaMetadataImage({
    required this.url,
    required this.width,
    required this.height,
  });

  String url;

  int width;

  int height;

  Object encode() {
    return <Object?>[
      url,
      width,
      height,
    ];
  }

  static MediaMetadataImage decode(Object result) {
    result as List<Object?>;
    return MediaMetadataImage(
      url: result[0]! as String,
      width: result[1]! as int,
      height: result[2]! as int,
    );
  }
}

class MediaSeekOptions {
  MediaSeekOptions({
    required this.position,
    required this.resumeState,
  });

  int position;

  ResumeState resumeState;

  Object encode() {
    return <Object?>[
      position,
      resumeState,
    ];
  }

  static MediaSeekOptions decode(Object result) {
    result as List<Object?>;
    return MediaSeekOptions(
      position: result[0]! as int,
      resumeState: result[1]! as ResumeState,
    );
  }
}

class MediaStatus {
  MediaStatus({
    required this.playerState,
    required this.idleReason,
    required this.streamPosition,
    required this.playbackRate,
    this.currentItemIndex,
    this.activeTrackIds,
  });

  PlayerState playerState;

  IdleReason idleReason;

  int streamPosition;

  double playbackRate;

  int? currentItemIndex;

  List<int>? activeTrackIds;

  Object encode() {
    return <Object?>[
      playerState,
      idleReason,
      streamPosition,
      playbackRate,
      currentItemIndex,
      activeTrackIds,
    ];
  }

  static MediaStatus decode(Object result) {
    result as List<Object?>;
    return MediaStatus(
      playerState: result[0]! as PlayerState,
      idleReason: result[1]! as IdleReason,
      streamPosition: result[2]! as int,
      playbackRate: result[3]! as double,
      currentItemIndex: result[4] as int?,
      activeTrackIds: (result[5] as List<Object?>?)?.cast<int>(),
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is RoutesScanningMode) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is MediaQueueType) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is MediaTrackType) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is MediaTrackSubtype) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is MediaType) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is ResumeState) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is IdleReason) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is PlayerState) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is MediaRoute) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is MediaLoadRequestData) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is MediaInfo) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is MediaQueueData) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is MediaQueueItem) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is MediaTrack) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is MediaMetadata) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is MediaMetadataImage) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is MediaSeekOptions) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is MediaStatus) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RoutesScanningMode.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaQueueType.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaTrackType.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaTrackSubtype.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaType.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ResumeState.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : IdleReason.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlayerState.values[value];
      case 137: 
        return MediaRoute.decode(readValue(buffer)!);
      case 138: 
        return MediaLoadRequestData.decode(readValue(buffer)!);
      case 139: 
        return MediaInfo.decode(readValue(buffer)!);
      case 140: 
        return MediaQueueData.decode(readValue(buffer)!);
      case 141: 
        return MediaQueueItem.decode(readValue(buffer)!);
      case 142: 
        return MediaTrack.decode(readValue(buffer)!);
      case 143: 
        return MediaMetadata.decode(readValue(buffer)!);
      case 144: 
        return MediaMetadataImage.decode(readValue(buffer)!);
      case 145: 
        return MediaSeekOptions.decode(readValue(buffer)!);
      case 146: 
        return MediaStatus.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CastApi {
  /// Constructor for [CastApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CastApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> init(String receiverAppId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.init$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[receiverAppId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> registerRoutesListener(RoutesScanningMode mode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.registerRoutesListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[mode]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unregisterRoutesListener(RoutesScanningMode mode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.unregisterRoutesListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[mode]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> selectRoute(String? id) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.selectRoute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[id]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> load(MediaLoadRequestData loadRequestData) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.load$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[loadRequestData]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setActiveMediaTracks(List<int> trackIds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.setActiveMediaTracks$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[trackIds]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.play$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.pause$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seek(MediaSeekOptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.seek$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[options]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> queueNext() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.queueNext$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> queuePrev() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.queuePrev$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPlaybackRate(double playbackRate) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.setPlaybackRate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playbackRate]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendMessage(String namespace, String message) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.sendMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[namespace, message]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.cast_framework.CastApi.stop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class CastEventsApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onRoutesChanged(List<MediaRoute> routes);

  void onStatusUpdated(MediaStatus? status);

  void onMediaInfoUpdated(MediaInfo? info);

  static void setUp(CastEventsApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.cast_framework.CastEventsApi.onRoutesChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.cast_framework.CastEventsApi.onRoutesChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<MediaRoute>? arg_routes = (args[0] as List<Object?>?)?.cast<MediaRoute>();
          assert(arg_routes != null,
              'Argument for dev.flutter.pigeon.cast_framework.CastEventsApi.onRoutesChanged was null, expected non-null List<MediaRoute>.');
          try {
            api.onRoutesChanged(arg_routes!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.cast_framework.CastEventsApi.onStatusUpdated$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.cast_framework.CastEventsApi.onStatusUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MediaStatus? arg_status = (args[0] as MediaStatus?);
          try {
            api.onStatusUpdated(arg_status);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.cast_framework.CastEventsApi.onMediaInfoUpdated$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.cast_framework.CastEventsApi.onMediaInfoUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MediaInfo? arg_info = (args[0] as MediaInfo?);
          try {
            api.onMediaInfoUpdated(arg_info);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
