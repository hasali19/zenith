use crate::App;

pub fn router() -> axum::Router<App> {
    axum::Router::new()
       .route("/subtitles/:id", axum::routing::get(crate::api::subtitles::get_subtitle))
       .route("/subtitles/:id", axum::routing::delete(crate::api::subtitles::delete_subtitle))
       .route("/items/:id/images/:type", axum::routing::get(crate::api::images::get_image))
       .route("/server/db/backup", axum::routing::post(crate::api::server::backup_db))
       .route("/movies", axum::routing::get(crate::api::movies::get_movies))
       .route("/movies/:id", axum::routing::get(crate::api::movies::get_movie))
       .route("/movies/recent", axum::routing::get(crate::api::movies::get_recent_movies))
       .route("/progress/:id", axum::routing::post(crate::api::progress::update_progress))
       .route("/auth/login", axum::routing::post(crate::api::auth::login))
       .route("/auth/logout", axum::routing::post(crate::api::auth::logout))
       .route("/import/subtitle", axum::routing::post(crate::api::import::import_subtitle))
       .route("/users", axum::routing::get(crate::api::users::get_all))
       .route("/users/me", axum::routing::get(crate::api::users::get_authenticated_user))
       .route("/users", axum::routing::post(crate::api::users::create))
       .route("/users/registrations", axum::routing::post(crate::api::users::create_registration))
       .route("/videos/:id", axum::routing::get(crate::api::videos::get_video_content))
       .route("/shows", axum::routing::get(crate::api::tv::get_shows))
       .route("/shows/recent", axum::routing::get(crate::api::tv::get_recent_shows))
       .route("/shows/:id/seasons", axum::routing::get(crate::api::tv::get_seasons))
       .route("/shows/:id/episodes", axum::routing::get(crate::api::tv::get_show_episodes))
       .route("/seasons/:id/episodes", axum::routing::get(crate::api::tv::get_episodes))
       .route("/scanner/start", axum::routing::post(crate::api::scanner::start_scan))
       .route("/items", axum::routing::get(crate::api::items::get_items))
       .route("/items/continue_watching", axum::routing::get(crate::api::items::get_continue_watching))
       .route("/items/:id", axum::routing::get(crate::api::items::get_item))
       .route("/items/:id", axum::routing::delete(crate::api::items::delete_item))
       .route("/items/:id/user_data", axum::routing::patch(crate::api::items::update_user_data))
       .route("/metadata/match_all", axum::routing::post(crate::api::metadata::match_all))
       .route("/metadata/refresh_outdated", axum::routing::post(crate::api::metadata::refresh_outdated))
       .route("/metadata/:id/find_match", axum::routing::post(crate::api::metadata::find_match))
       .route("/metadata/:id/set_match", axum::routing::post(crate::api::metadata::set_match))
       .route("/metadata/:id/refresh", axum::routing::post(crate::api::metadata::refresh_metadata))
       .route("/transcoder", axum::routing::get(crate::api::transcoder::get_state))
       .route("/transcoder/events", axum::routing::get(crate::api::transcoder::get_events))
       .route("/transcoder", axum::routing::post(crate::api::transcoder::transcode))
       .route("/collections", axum::routing::get(crate::api::collections::get_collections))
       .route("/collections/:id", axum::routing::get(crate::api::collections::get_collection))
       .route("/collections", axum::routing::post(crate::api::collections::create_collection))
       .route("/collections/:id", axum::routing::delete(crate::api::collections::delete_collection))
       .route("/collections/:id", axum::routing::put(crate::api::collections::update_collection))
}

pub fn route_specs(cx: &mut speq::reflection::TypeContext) -> Vec<speq::RouteSpec> {
    vec![
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_subtitle"),
            path: std::borrow::Cow::Borrowed("/subtitles/:id"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/subtitles.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("delete_subtitle"),
            path: std::borrow::Cow::Borrowed("/subtitles/:id"),
            method: axum::http::Method::DELETE,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/subtitles.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_image"),
            path: std::borrow::Cow::Borrowed("/items/:id/images/:type"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/images.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("backup_db"),
            path: std::borrow::Cow::Borrowed("/server/db/backup"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/server.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_movies"),
            path: std::borrow::Cow::Borrowed("/movies"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/movies.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_movie"),
            path: std::borrow::Cow::Borrowed("/movies/:id"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/movies.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_recent_movies"),
            path: std::borrow::Cow::Borrowed("/movies/recent"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/movies.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("update_progress"),
            path: std::borrow::Cow::Borrowed("/progress/:id"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/progress.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("login"),
            path: std::borrow::Cow::Borrowed("/auth/login"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/auth.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("logout"),
            path: std::borrow::Cow::Borrowed("/auth/logout"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/auth.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("import_subtitle"),
            path: std::borrow::Cow::Borrowed("/import/subtitle"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/import.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_all"),
            path: std::borrow::Cow::Borrowed("/users"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/users.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_authenticated_user"),
            path: std::borrow::Cow::Borrowed("/users/me"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/users.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("create"),
            path: std::borrow::Cow::Borrowed("/users"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/users.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("create_registration"),
            path: std::borrow::Cow::Borrowed("/users/registrations"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/users.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_video_content"),
            path: std::borrow::Cow::Borrowed("/videos/:id"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/videos.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_shows"),
            path: std::borrow::Cow::Borrowed("/shows"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/tv.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_recent_shows"),
            path: std::borrow::Cow::Borrowed("/shows/recent"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/tv.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_seasons"),
            path: std::borrow::Cow::Borrowed("/shows/:id/seasons"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/tv.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_show_episodes"),
            path: std::borrow::Cow::Borrowed("/shows/:id/episodes"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/tv.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_episodes"),
            path: std::borrow::Cow::Borrowed("/seasons/:id/episodes"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/tv.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("start_scan"),
            path: std::borrow::Cow::Borrowed("/scanner/start"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/scanner.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_items"),
            path: std::borrow::Cow::Borrowed("/items"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/items.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_continue_watching"),
            path: std::borrow::Cow::Borrowed("/items/continue_watching"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/items.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_item"),
            path: std::borrow::Cow::Borrowed("/items/:id"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/items.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("delete_item"),
            path: std::borrow::Cow::Borrowed("/items/:id"),
            method: axum::http::Method::DELETE,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/items.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("update_user_data"),
            path: std::borrow::Cow::Borrowed("/items/:id/user_data"),
            method: axum::http::Method::PATCH,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/items.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("match_all"),
            path: std::borrow::Cow::Borrowed("/metadata/match_all"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/metadata.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("refresh_outdated"),
            path: std::borrow::Cow::Borrowed("/metadata/refresh_outdated"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/metadata.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("find_match"),
            path: std::borrow::Cow::Borrowed("/metadata/:id/find_match"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/metadata.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("set_match"),
            path: std::borrow::Cow::Borrowed("/metadata/:id/set_match"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/metadata.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("refresh_metadata"),
            path: std::borrow::Cow::Borrowed("/metadata/:id/refresh"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/metadata.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_state"),
            path: std::borrow::Cow::Borrowed("/transcoder"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/transcoder.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_events"),
            path: std::borrow::Cow::Borrowed("/transcoder/events"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/transcoder.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("transcode"),
            path: std::borrow::Cow::Borrowed("/transcoder"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/transcoder.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_collections"),
            path: std::borrow::Cow::Borrowed("/collections"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/collections.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("get_collection"),
            path: std::borrow::Cow::Borrowed("/collections/:id"),
            method: axum::http::Method::GET,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/collections.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("create_collection"),
            path: std::borrow::Cow::Borrowed("/collections"),
            method: axum::http::Method::POST,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/collections.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("delete_collection"),
            path: std::borrow::Cow::Borrowed("/collections/:id"),
            method: axum::http::Method::DELETE,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/collections.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
        speq::RouteSpec {
            name: std::borrow::Cow::Borrowed("update_collection"),
            path: std::borrow::Cow::Borrowed("/collections/:id"),
            method: axum::http::Method::PUT,
            src_file: std::borrow::Cow::Borrowed("server/zenith/src/api/collections.rs"),
            doc: None,
            params: vec![],
            query: None,
            request: None,
            responses: vec![],
        },
    ]
}
